spring framework

spring boot

=> 내장톰캣
=> jar or war
   애플리케이션 개발하고 테스트 후 실제 운영 서버에 배포하기 위해서는 패키지 필요
   ==> 웹 어플리케이션인 경우는 war 파일로 패키징 함
   ==> jar : 일반 응용 프로그램
=> 라이브러리 자동 관리(pom.xml)
=> spring boot 는 spring framework 와 다르게 설정이 자동화


화면단 결정
=> jsp (default 아님)
=> thymeleaf (html 확장자를 사용, jsp 와 유사)
=> freemaker, groovy, mushache

프로젝트 구조
1) 자바 파일 
   src/main/java/기본패키지/

2) html, css, js
   static/

3) templates
   thymeleaf 파일

4) application.properties : 프로젝트 환경설정
   db 설정, 서버 포트 변경, 로그 설정...


스프링 부트에서 데이터베이스 연동
1) 스프링 jdbc 
2) ORM 라이브러리 
   - Mybatis
   - hibernate


스프링 중요 개념
1. DI(dependency Injection) : 의존성 주입
   - setter, 생성자를 이용한 객체 생성

==> 스프링 컨테이너가 필요한 객체를 필요한 시점에 주입해줌(IoC)
==> Inversion of Control(제어의 역전)

모든 요청은 컨트롤러에 경로가 있어야 함

직접적으로 파일 링크 불가
<a href="index.html">index</a> (X)

컨트롤러 경로 지정
<a href="/">index</a> (O)


어노테이션
@Controller : 컨트롤러 클래스 위에 설정 / 스프링 컨테이너가 해당 클래스의 객체를 생성한 후 관리 해 줌
@RequestMapping(value="",method=) : 경로를 지정(예전버전)
@GetMapping("경로") : @RequestMapping 의 GET 간략화
@PostMapping("경로") : @RequestMapping 의 POST 간략화
@RequestParam() : request 에서 넘어오는 파라메터의 이름을 지정할 때 사용
@ModelAttribute : Dto 객체 이름 지정
                  == model.addAttribute("page", page)


데이터베이스 연동
1) JDBC 사용

--------------------
스프링 프레임워크
1) JDBC 사용         (X)
2) 스프링 DAO        (X)
3) 마이바티즈
4) 하이버네이트 ORM 