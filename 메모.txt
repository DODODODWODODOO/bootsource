spring framework

spring boot

=> 내장톰캣
=> jar or war
   애플리케이션 개발하고 테스트 후 실제 운영 서버에 배포하기 위해서는 패키지 필요
   ==> 웹 어플리케이션인 경우는 war 파일로 패키징 함
   ==> jar : 일반 응용 프로그램
=> 라이브러리 자동 관리(pom.xml)
=> spring boot 는 spring framework 와 다르게 설정이 자동화


화면단 결정
=> jsp (default 아님)
=> thymeleaf (html 확장자를 사용, jsp 와 유사)
=> freemaker, groovy, mushache

프로젝트 구조
1) 자바 파일 
   src/main/java/기본패키지/

2) html, css, js
   static/

3) templates
   thymeleaf 파일

4) application.properties : 프로젝트 환경설정
   db 설정, 서버 포트 변경, 로그 설정...


스프링 부트에서 데이터베이스 연동
1) 스프링 jdbc 
2) ORM 라이브러리 
   - Mybatis
   - hibernate


스프링 중요 개념
1. DI(dependency Injection) : 의존성 주입
   - setter, 생성자를 이용한 객체 생성

==> 스프링 컨테이너가 필요한 객체를 필요한 시점에 주입해줌(IoC)
==> Inversion of Control(제어의 역전)

모든 요청은 컨트롤러에 경로가 있어야 함

직접적으로 파일 링크 불가
<a href="index.html">index</a> (X)

컨트롤러 경로 지정
<a href="/">index</a> (O)


어노테이션
@Conponent : 스프링 컨테이너가 관리가 필요한 모든 객체에 사용
@Controller : 컨트롤러 클래스 위에 설정 / 스프링 컨테이너가 해당 클래스의 객체를 생성한 후 관리 해 줌
@Service : 서비스 클래스 위에 설정 / 스프링 컨테이너가 해당 클래스의 객체를 생성한 후 관리 해 줌

@Autowired : 객체 주입 (생성된 객체 넣어줘)
private  MemoRepository memoRepository = new MemoRepository() (X)
MemoRepository 객체 생성해서 스프링 컨테이너가 가지고 있음

@RequestMapping(value="",method=) : 경로를 지정(예전버전)
@GetMapping("경로") : @RequestMapping 의 GET 간략화
@PostMapping("경로") : @RequestMapping 의 POST 간략화
@RequestParam() : request 에서 넘어오는 파라메터의 이름을 지정할 때 사용
@ModelAttribute : Dto 객체 이름 지정
                  == model.addAttribute("page", page)
                  == request.setAttribute("dto",dto)


데이터베이스 연동
1) JDBC 사용

--------------------
스프링 프레임워크
1) JDBC 사용         (X)
2) 스프링 DAO        (X)
3) 마이바티즈
4) 하이버네이트 ORM 


JavaScript Object Notation (JSON) 은 JavaScript 객체 문법
자바 스크립트 객체 : {"key":value, key:value}








웹 개발

SSR(Server Side Rendering) : JSP, thymeleaf
- DB 작업, 페이지 작업후 브라우저 전송

데이터만 주고 받기 ==> Ajax

SPA (Single Page Application)

CSR (Client Side Rendering) : react, vue

1. Ajax
 - jQuery : $ajax()
   DOM : $(".btn) <==> document.querySelector(".btn)
   자바스크립트의 성능(복잡성, 브라우저마다 다른코드...) 부분을 보완 ==> 자바스크립트 성능 좋아짐

 - fetch() : get방식
             post == form : post 보내는 방식과 동일
 - axios() : node.js 







 spring security
 ==> web
      1. 주민등록번호 수집 금지
      2. 비밀번호 암호화
      3. 회원, 관리자 등급 권한 부여
      4. 네트워크 공격(sql인젝션, 세션변조, csrf 공격....) 대비

인증(Authentication) ==> 로그인
- 자신을 증명하는 것
- 대상자 스스로 자신을 증명할 자료를 제시함

권한(Authorization) = 인가
- 타인에 의해서 자격이 부여됨

spring security 프로젝트 적용
1. 모든 요청은 로그인 페이지를 거치도록 설정 됨
   => default LoginPage 가 동작 
   => test user 생성
      username(id) : user
      password : 컨트롤러 로딩 시 변경

2. 로그인 작업
   => 로그인 성공 시 원래 시작했던 페이지로 되돌려 보내 줌
   => http://localhost:8080/login : 로그인 페이지 default 경로
   => id 역할을 하는 요소의 이름은 반드시 username (변경 가능)
   => 비밀번호 역할을 하는 요소의 이름은 반드시 password (변경 가능)
   => get 을 제외한 모든 method 는 csrf 값을 포함해야 한다(csrf disable 하지 않는다면)

   => http://localhost:8080/security/admin 요청
   => 권한 부여 받았는지 확인함
   => http://localhost:8080/login 페이지 보여주기
   => 로그인 입력 후 인가된 사용자라면(인가된 정보를 SecurityContext 저장)
   => 시작했던 페이지로 이동 (http://localhost:8080/security/admin)

3. 로그아웃 작업
   => default LogOutPage 가 동작
   => http://localhost:8080.logout => 자동 응답(session 제거, 쿠키 제거) 처리

4. 접근제한
   => 회원(member, admin, guest...)에 대한 요청별 접근 제한



club
- ROLE : USER, MANAGER, admin
         여러개 부여될 수 있음

login post 직접하지 않음


board
- role : member, admin
/, /board/list,  /board/read => 전체 접근 가능



다대다관계에선 중간 테이블을 만든다




실제 저장된 이미지 결과와 데이터베이스 데이터가 일치하지 않음
==> 스케쥴러 이용 : 자동으로 약속된 시간에 동작을 하는 프로그램
==> 스프링 스케쥴러 제공